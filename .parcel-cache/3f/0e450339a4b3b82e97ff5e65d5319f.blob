"use strict";

var model = _interopRequireWildcard(require("./model.js"));

var _songView = _interopRequireDefault(require("./views/songView.js"));

var _searchView = _interopRequireDefault(require("./views/searchView.js"));

var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));

var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));

var _chartsView = _interopRequireDefault(require("./views/chartsView.js"));

var _addCommentView = _interopRequireDefault(require("./views/addCommentView.js"));

var _featuresView = _interopRequireDefault(require("./views/featuresView.js"));

var _navView = _interopRequireDefault(require("./views/navView.js"));

require("core-js/stable");

require("regenerator-runtime/runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const controlSongs = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;

    _songView.default.renderSpinner(); //1)loading song


    await model.loadSong(id); //2)render song

    _songView.default.render(model.state.song);
  } catch (err) {
    _songView.default.renderError();
  }
};

const controlSearchResults = async function () {
  try {
    _resultsView.default.renderSpinner(); // 1) get search query


    const query = _searchView.default.getQuery();

    if (!query) return; //2) load search results

    await model.loadSearchResults(query); //3) render results

    _resultsView.default.render(model.getSearchResultsPage()); //4) render initial pagination buttons


    _paginationView.default.render(model.state.search);
  } catch (err) {
    console.log(err);
  }
};

const controlPagination = function (goToPage) {
  // 1) render NEW results
  _resultsView.default.render(model.getSearchResultsPage(goToPage)); //2) render NEW pagination button


  _paginationView.default.render(model.state.search);
}; //charts


const controlCharts = function () {
  //1) get charts data
  const charts = model.getCharts(); //2) render charts

  _chartsView.default.render(charts);
}; //add comment


const controlComment = function (commentArr) {
  // 1) update database
  model.addComment(commentArr); // 2) rerender

  _songView.default.render(model.state.song); //3) rerender chart


  controlCharts();
};

const init = function () {
  _songView.default.addHandlerRender(controlSongs);

  _searchView.default.addHandlerSearch(controlSearchResults);

  _paginationView.default.addHandlerClick(controlPagination);

  _chartsView.default.addHandlerCharts(controlCharts);

  _addCommentView.default.addHandlerAddComment(controlComment);

  _chartsView.default.addHandlerClickCharts();

  _featuresView.default.addHandlerTabs();

  _navView.default.addHandlerClickNav();
};

init();